[실습 1 @MyAnnotation 애노테이션 만들기]

1 ) 기본적인 사용자 애노테이션 `@MyAnnotation`을 만들고  
2) 이를 클래스에 적용한 후  
3) 리플렉션을 이용해 해당 애노테이션 정보를 출력하는 코드 작성  

[Step 01: 애노테이션 정의]

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@Retention(RetentionPolicy.RUNTIME) // 런타임까지 유지
@interface MyAnnotation {
    String value() default "기본값"; // 기본값을 설정할 수 있는 속성
}


[Step 02: 애노테이션 적용]
@MyAnnotation(value = "Hello Annotation!")
class MyClass {
    
}

[Step 03: 리플렉션을 사용해 애노테이션 값 출력]

import java.lang.reflect.*;

public class AnnotationTest {
    public static void main(String[] args) {
        Class<MyClass> clazz = MyClass.class;
        if (clazz.isAnnotationPresent(MyAnnotation.class)) {
            MyAnnotation annotation = clazz.getAnnotation(MyAnnotation.class);
            System.out.println("애노테이션 값: " + annotation.value());
        }
    }
}

--------------------------------------------------------

[실습 2 @PrintMessage` 애노테이션을 사용해 특정 메서드만 실행]

1)특정 메서드에 @PrintMessage애노테이션을 적용하고  
2) 리플렉션을 사용하여 해당 애노테이션이 붙은 메서드만 실행  

[Step 01: 애노테이션 정의]

import java.lang.annotation.*;
import java.lang.reflect.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD) // 메서드에만 적용 가능
@interface PrintMessage {}

[Step 02: 애노테이션 적용]
class TestClass {
    @PrintMessage
    public void hello() {
        System.out.println("Hello World!");
    }

    public void bye() {
        System.out.println("Goodbye!");
    }
}

[Step 03: 리플렉션을 이용해 애노테이션이 붙은 메서드만 실행]
public class AnnotationProcessor {
    public static void main(String[] args) throws Exception {
        TestClass obj = new TestClass();
        for (Method method : obj.getClass().getDeclaredMethods()) {
            if (method.isAnnotationPresent(PrintMessage.class)) {
                method.invoke(obj); // 애노테이션이 붙은 메서드만 실행
            }
        }
    }
}


--------------------------------------------------------


[실습 3: @MaxValue 애노테이션을 사용해 값 검증]


1) 특정 필드에 @MaxValue 애노테이션을 적용  
2) 설정된 최대값을 초과하면 오류 메시지 출력  

[Step 01: 애노테이션 정의] 

import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@interface MaxValue {
    int value(); // 최대값 지정
}

[Step 02: 애노테이션 적용]

class NumberClass {
    @MaxValue(100)
    int number;

    public NumberClass(int number) {
        this.number = number;
    }
}


[Step 03: 리플렉션을 사용하여 값 검증]

import java.lang.reflect.*;

public class MaxValueProcessor {
    public static void main(String[] args) throws Exception {
        NumberClass obj = new NumberClass(120); // 100을 초과하는 값

        for (Field field : obj.getClass().getDeclaredFields()) {
            if (field.isAnnotationPresent(MaxValue.class)) {
                MaxValue annotation = field.getAnnotation(MaxValue.class);
                int maxValue = annotation.value();
                int fieldValue = field.getInt(obj);
                
                if (fieldValue > maxValue) {
                    System.out.println(field.getName() + " 값이 최대값을 초과했습니다! (최대: " + maxValue + ")");
                }
            }
        }
    }
}

